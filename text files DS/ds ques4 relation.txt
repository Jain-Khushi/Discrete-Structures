#include <iostream>
using namespace std;

class RELATION
{
public:
    bool reflexive(int m, int a[10][10])
    {
        int r = 1;
        for (int i = 0; i < m; i++)
        {
            if (a[i][i] != 1)
                r = 0;
        }
        return r;
    }

    bool symmetric(int m, int a[10][10])
    {
        int s = 1;
        for (int i = 0; i < m; i++)
            for (int j = 0; j < m; j++)
            {
                if (a[i][j] == 1 && a[j][i] != 1)
                    s = 0;
            }
        return s;
    }

    bool antisymmetric(int m, int a[10][10])
    {
        int ans = 1;
        for (int i = 0; i < m; i++)
            for (int j = 0; j < m; j++)
            {
                if (a[i][j] == 1 && a[j][i] == 1 && i != j)
                    ans = 0;
            }
        return ans;
    }

    bool transitive(int m, int a[10][10])
    {
        int tr = 1;
        for (int i = 0; i < m; i++)
            for (int j = 0; j < m; j++)
                for (int k = 0; k < m; k++)
                {
                    if (a[i][j] == 1 && a[j][k] == 1 && a[i][k] != 1)
                        tr = 0;
                }

        return tr;
    }
};

int main()
{
    int a[10][10], m;
    cout << "Enter the order of the square matrix :\n";
    cin >> m;
    cout << "Enter the relation in matrix format(0/1) :\n";
    for (int i = 0; i < m; i++)
        for (int j = 0; j < m; j++)
            cin >> a[i][j];

    RELATION R;

    cout << "The relation is Reflexive : " << boolalpha << R.reflexive(m, a) << endl;
    cout << "The relation is Symmetric : " << boolalpha << R.symmetric(m, a) << endl;
    cout << "The relation is Antisymmetric : " << boolalpha << R.antisymmetric(m, a) << endl;
    cout << "The relation is Transitive : " << boolalpha << R.transitive(m, a) << endl;
    
    if(R.reflexive(m,a)==1 && R.symmetric(m,a)==1 && R.transitive(m,a)==1)
      cout<<"\nRelation is Equivalent."<<endl;
    else if(R.reflexive(m,a)==1 && R.antisymmetric(m,a)==1 && R.transitive(m,a)==1)
      cout<<"\nRelation is Partial Ordering Relation."<<endl;
    else
      cout<<"\nRelation is neither Equivalent nor Partial Ordering."<<endl;

    return 0;
}
